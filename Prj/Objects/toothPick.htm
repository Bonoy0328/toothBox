<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\toothPick.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\toothPick.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Sep 30 20:54:03 2021
<BR><P>
<H3>Maximum Stack Usage =         48 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Motor_Port_Init &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[f]">IRQ004_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">IRQ004_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">HardFault_Handler</a> from interrupts_hc32l110.o(i.HardFault_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[b]">IRQ000_Handler</a> from interrupts_hc32l110.o(i.IRQ000_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[c]">IRQ001_Handler</a> from interrupts_hc32l110.o(i.IRQ001_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[d]">IRQ002_Handler</a> from interrupts_hc32l110.o(i.IRQ002_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[e]">IRQ003_Handler</a> from interrupts_hc32l110.o(i.IRQ003_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[f]">IRQ004_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[10]">IRQ005_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[11]">IRQ006_Handler</a> from interrupts_hc32l110.o(i.IRQ006_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[12]">IRQ007_Handler</a> from interrupts_hc32l110.o(i.IRQ007_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[13]">IRQ008_Handler</a> from interrupts_hc32l110.o(i.IRQ008_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[14]">IRQ009_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[15]">IRQ010_Handler</a> from interrupts_hc32l110.o(i.IRQ010_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[16]">IRQ011_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[17]">IRQ012_Handler</a> from interrupts_hc32l110.o(i.IRQ012_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[18]">IRQ013_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[19]">IRQ014_Handler</a> from interrupts_hc32l110.o(i.IRQ014_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1a]">IRQ015_Handler</a> from interrupts_hc32l110.o(i.IRQ015_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1b]">IRQ016_Handler</a> from interrupts_hc32l110.o(i.IRQ016_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1c]">IRQ017_Handler</a> from interrupts_hc32l110.o(i.IRQ017_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1d]">IRQ018_Handler</a> from interrupts_hc32l110.o(i.IRQ018_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1e]">IRQ019_Handler</a> from interrupts_hc32l110.o(i.IRQ019_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[1f]">IRQ020_Handler</a> from interrupts_hc32l110.o(i.IRQ020_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[20]">IRQ021_Handler</a> from interrupts_hc32l110.o(i.IRQ021_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[21]">IRQ022_Handler</a> from interrupts_hc32l110.o(i.IRQ022_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[22]">IRQ023_Handler</a> from interrupts_hc32l110.o(i.IRQ023_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[23]">IRQ024_Handler</a> from interrupts_hc32l110.o(i.IRQ024_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[24]">IRQ025_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[25]">IRQ026_Handler</a> from interrupts_hc32l110.o(i.IRQ026_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[26]">IRQ027_Handler</a> from interrupts_hc32l110.o(i.IRQ027_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[27]">IRQ028_Handler</a> from interrupts_hc32l110.o(i.IRQ028_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[28]">IRQ029_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[29]">IRQ030_Handler</a> from interrupts_hc32l110.o(i.IRQ030_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[2a]">IRQ031_Handler</a> from interrupts_hc32l110.o(i.IRQ031_Handler) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_hc32l110.o(.text) referenced from startup_hc32l110.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_hc32l110.o(i.SystemInit) referenced from startup_hc32l110.o(.text)
 <LI><a href="#[2d]">__main</a> from __main.o(!!!main) referenced from startup_hc32l110.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[31]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[35]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[6f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[70]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[71]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[72]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[73]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[74]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[75]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[76]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[77]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[78]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[79]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[80]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[81]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[82]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[83]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[84]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[85]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[86]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[87]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[88]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[89]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[32]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[34]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[8a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[36]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Motor_Port_Init &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[8b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[39]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[8c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ004_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ005_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ009_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ011_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ013_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ025_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ029_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32l110.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32l110.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8d]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[38]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[96]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[97]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>Clk_Enable</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, clk.o(i.Clk_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Clk_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkWriteDummy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4b]"></a>Clk_GetClkRdy</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, clk.o(i.Clk_GetClkRdy))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[65]"></a>Clk_GetHClkFreq</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, clk.o(i.Clk_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Clk_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[62]"></a>Clk_SetPeripheralGate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clk.o(i.Clk_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clk_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Port_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Port_Init
</UL>

<P><STRONG><a name="[44]"></a>Clk_SetRCHFreq</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, clk.o(i.Clk_SetRCHFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clk_SetRCHFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[49]"></a>Clk_SetRCL_StableTime</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, clk.o(i.Clk_SetRCL_StableTime))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[46]"></a>Clk_SetSource</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, clk.o(i.Clk_SetSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clk_SetSource
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkWriteDummy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[48]"></a>Clk_SetXTH_StableTime</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, clk.o(i.Clk_SetXTH_StableTime))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[4a]"></a>Clk_SetXTL_StableTime</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, clk.o(i.Clk_SetXTL_StableTime))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
</UL>

<P><STRONG><a name="[47]"></a>Clk_SwitchTo</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, clk.o(i.Clk_SwitchTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Clk_SwitchTo &rArr; SystemCoreClockUpdate &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetXTL_StableTime
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetXTH_StableTime
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetSource
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCL_StableTime
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_GetClkRdy
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Clk_SysTickConfig</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, clk.o(i.Clk_SysTickConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clk_SysTickConfig &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4f]"></a>Gpio_InitIOExt</STRONG> (Thumb, 350 bytes, Stack size 20 bytes, gpio.o(i.Gpio_InitIOExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalog
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Port_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Port_Init
</UL>

<P><STRONG><a name="[50]"></a>Gpio_SetAnalog</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gpio.o(i.Gpio_SetAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_SetAnalog
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
</UL>

<P><STRONG><a name="[64]"></a>Gpio_SetIO</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Port_Init
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ000_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ001_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ002_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ003_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ006_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ007_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ008_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ010_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ012_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ014_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ015_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ016_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ017_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ019_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ020_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ021_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ022_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ023_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ024_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ026_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ027_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ028_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ030_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EfRam_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ031_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l110.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkTrim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>Led_Port_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, main.o(i.Led_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Led_Port_Init &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>Motor_Port_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, main.o(i.Motor_Port_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Motor_Port_Init &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_InitIOExt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l110.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, system_hc32l110.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Clk_GetHClkFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SysTickConfig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCHFreq
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HidePinInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l110.o(.text)
</UL>
<P><STRONG><a name="[45]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, clk.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCHFreq
</UL>

<P><STRONG><a name="[3c]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddl.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[67]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[68]"></a>delay1ms</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ddl.o(i.delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>main</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main &rArr; Motor_Port_Init &rArr; Gpio_InitIOExt &rArr; Gpio_SetAnalog
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SwitchTo
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Port_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Port_Init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetRCHFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[66]"></a>_HidePinInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_hc32l110.o(i._HidePinInit))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[42]"></a>ClkUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(i.ClkUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetSource
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
</UL>

<P><STRONG><a name="[43]"></a>ClkWriteDummy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(i.ClkWriteDummy))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SetSource
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Enable
</UL>

<P><STRONG><a name="[4e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, clk.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_SysTickConfig
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5c]"></a>Adc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ024_Handler
</UL>

<P><STRONG><a name="[58]"></a>Adt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ020_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ019_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ018_Handler
</UL>

<P><STRONG><a name="[60]"></a>ClkTrim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ031_Handler
</UL>

<P><STRONG><a name="[5f]"></a>EfRam_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ030_Handler
</UL>

<P><STRONG><a name="[51]"></a>Gpio_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>

<P><STRONG><a name="[55]"></a>I2c_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ012_Handler
</UL>

<P><STRONG><a name="[57]"></a>LpTim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ017_Handler
</UL>

<P><STRONG><a name="[53]"></a>LpUart_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ008_Handler
</UL>

<P><STRONG><a name="[5e]"></a>Lvd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ028_Handler
</UL>

<P><STRONG><a name="[59]"></a>Pca_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ021_Handler
</UL>

<P><STRONG><a name="[5b]"></a>Rtc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ023_Handler
</UL>

<P><STRONG><a name="[54]"></a>Spi_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ010_Handler
</UL>

<P><STRONG><a name="[56]"></a>Tim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ016_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ015_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
</UL>

<P><STRONG><a name="[52]"></a>Uart_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ007_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ006_Handler
</UL>

<P><STRONG><a name="[5d]"></a>Vc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ027_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ026_Handler
</UL>

<P><STRONG><a name="[5a]"></a>Wdt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ022_Handler
</UL>

<P><STRONG><a name="[3f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
